type Stock
  @model
  @key(
    name: "byUpdatedAt"
    fields: ["type", "updatedAt"]
    queryField: "stocksByUpdatedAt"
  ) {
  id: ID!
  name: String
  ticker: String!
  overview: Overview
  quote: Quote
  type: StockType
  holdings: [Holding] @connection(name: "StockHoldings")
  calculations: Calculation
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum StockType {
  Stock
  Fund
}

type Holding @model {
  id: ID!
  shares: Float!
  costBasis: Float!
  purchaseDate: AWSDate!
  brokerage: String!
  soldDate: AWSDate
  notes: String
  stock: Stock @connection(name: "StockHoldings")
}

type Overview {
  exchange: String
  currency: String
  description: String
  sector: String
  marketCap: String
  dividendYield: String
  last52High: String
  last52Low: String
  dma50: String
  dma200: String
}

type Quote {
  open: String
  high: String
  low: String
  price: String
  volume: String
  prevClose: String
  change: String
  changePercent: String
}

type Calculation {
  stockTotalShares: Float
  stockCostBasis: Float
  stockGainLoss: Float
  stockCurrentValue: Float
  stockAvgPerShare: Float
  stockGainLossPercent: Float
}

type Query {
  hello: String! @function(name: "hello-${env}")
  getDetail(ticker: String): String! @function(name: "getDetail-${env}")
}

type Mutation {
  addStock(ticker: String): Stock! @function(name: "addStock-${env}")
  updateStockData(id: String): Stock @function(name: "updateStockData-${env}")
  stockCleanup: String @function(name: "stockCleanup-${env}")
}
